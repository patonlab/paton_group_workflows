#!/usr/bin/python
from __future__ import print_function

# THIS SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# Comments and/or additions are welcome (send e-mail to:
# robert.paton@colostate.edu

#Python Libraries
import os.path, sys
from glob import glob
from decimal import Decimal
from optparse import OptionParser

#Calculation templates
wb97xv_route = 'RIJCOSX wB97X-V ma-def2-QZVPP def2/J TightSCF FinalGrid7 Grid6\n%scf\nMaxIter 100 # Max. no. of SCF iterations\nThresh 1e-16 # Threshold for neglecting integrals / Fock matrix contributions\nTCut 1e-18 # Threshold for neglecting primitive batches. \nend'

dlpno_route = 'TightSCF TightPNO DLPNO-CCSD(T) cc-pVTZ/JK cc-pVTZ/C ExtrapolateEP2(3/4,cc,DLPNO-CCSD(T),NormalPNO)'
dlpno_loose_route = 'TightSCF NormallPNO DLPNO-CCSD(T) cc-pVTZ/JK cc-pVTZ/C ExtrapolateEP2(3/4,cc,DLPNO-CCSD(T),LoosePNO)'

#Some useful arrays
periodictable = ["","H","He","Li","Be","B","C","N","O","F","Ne","Na","Mg","Al","Si","P","S","Cl","Ar","K","Ca","Sc","Ti","V","Cr","Mn","Fe","Co","Ni","Cu","Zn","Ga","Ge","As","Se","Br","Kr","Rb","Sr","Y","Zr",
    "Nb","Mo","Tc","Ru","Rh","Pd","Ag","Cd","In","Sn","Sb","Te","I","Xe","Cs","Ba","La","Ce","Pr","Nd","Pm","Sm","Eu","Gd","Tb","Dy","Ho","Er","Tm","Yb","Lu","Hf","Ta","W","Re","Os","Ir","Pt","Au","Hg","Tl",
    "Pb","Bi","Po","At","Rn","Fr","Ra","Ac","Th","Pa","U","Np","Pu","Am","Cm","Bk","Cf","Es","Fm","Md","No","Lr","Rf","Db","Sg","Bh","Hs","Mt","Ds","Rg","Uub","Uut","Uuq","Uup","Uuh","Uus","Uuo"]

def elementID(massno):
        if massno < len(periodictable): return periodictable[massno]
        else: return "XX"

#Read molecule data from a compchem output file
class getoutData:
    def __init__(self, file):

        if not os.path.exists(file):
            print(("\nFATAL ERROR: Output file [ %s ] does not exist"%file))

        def getFORMAT(self, outlines):
            for i in range(0,len(outlines)):
                if outlines[i].find("Gaussian") > -1: self.FORMAT = "Gaussian"; break
                if outlines[i].find("MOPAC") > -1: self.FORMAT = "Mopac"; break

        def getSPIN(self, outlines, format):
                        if format == "Gaussian":
                                for i in range(0,len(outlines)):
                                        if outlines[i].find("<Sx>") > -1:
                                                self.S2 = (float(outlines[i].split()[7]))

        def getJOBTYPE(self, outlines, format):
            if format == "Gaussian":
                for i in range(0,len(outlines)):
                    if outlines[i].find(" # ") > -1:
                        self.JOBTYPE = outlines[i].lstrip(" #").rstrip("\n")
                        break

        def getTERMINATION(self, outlines,format):
            if format == "Gaussian":
                  for i in range(0,len(outlines)):
                    if outlines[i].find("Normal termination") > -1: self.TERMINATION = "normal"

        def getCHARGE(self, outlines, format):
            if format == "Gaussian":
                for i in range(0,len(outlines)):
                    if outlines[i].find("Charge = ") > -1:
                        self.CHARGE = int(outlines[i].split()[2])
                        self.MULT = int(outlines[i].split()[5].rstrip("\n"))
                        break
            if format == "Mopac":
                self.CHARGE = 0
                #ideally add up all the atomic charges here?
                self.MULT =  1

        def getATOMTYPES(self, outlines, format):
            self.ATOMTYPES = []
            self.CARTESIANS = []
            self.ATOMICTYPES = []
            self.NATOMS = 1
            if format == "Gaussian":
                anharmonic_geom=0
                for i in range(0,len(outlines)):
                    if outlines[i].find("Input orientation") > -1:
                        standor = i #; print("standor", standor)
                    if outlines[i].find("Standard orientation") > -1:
                        standor = i #; print("standor", standor)
                    if outlines[i].find("Vib.Av.Geom.") > -1:
                        standor = i #; print("standor", standor)
                        anharmonic_geom=1
                    if outlines[i].find("Distance matrix") > -1 or outlines[i].find("Rotational constants") >-1:
                        if outlines[i-1].find("-------") > -1:
                            self.NATOMS = i-standor-6
                            #print("NATOMS", self.NATOMS)
                try: standor
                except NameError: pass
                else:
                    for i in range (standor+5,standor+5+self.NATOMS):
                        self.ATOMTYPES.append(elementID(int(outlines[i].split()[1])))
                        self.ATOMICTYPES.append(int(outlines[i].split()[2]))

                        if anharmonic_geom==0:
                            if len(outlines[i].split()) > 5: self.CARTESIANS.append([float(outlines[i].split()[3]),float(outlines[i].split()[4]),float(outlines[i].split()[5])])
                            else: self.CARTESIANS.append([float(outlines[i].split()[2]),float(outlines[i].split()[3]),float(outlines[i].split()[4])])
                        if anharmonic_geom==1:self.CARTESIANS.append([float(outlines[i].split()[2]),float(outlines[i].split()[3]),float(outlines[i].split()[4])])

            if format == "Mopac":
                        for i in range(0,len(outlines)):
                                #if outlines[i].find("TOTAL ENERGY") > -1: #Get the energy (convert from eV to Hartree)
                                #   energy=(float(line.split()[3]))
                                #    energy=energy*0.036749309
                                if outlines[i].find("CARTESIAN COORDINATES") > -1: startgeom = i+4
                                if outlines[i].find("ATOMIC ORBITAL ELECTRON POPULATIONS") > -1: endgeom = i-2; break
                                #if outlines[i].find("TOTAL CPU TIME") > -1:
                                #    time=[0.0,0.0,0.0,float(line.split()[3])]
                        self.NATOMS = endgeom - startgeom
                        for i in range (startgeom,endgeom):
                            self.ATOMTYPES.append(outlines[i].split()[1])
                            self.CARTESIANS.append([float(outlines[i].split()[2]),float(outlines[i].split()[3]),float(outlines[i].split()[4])])

        def getFREQS(self, outlines, format):
            self.FREQS = []; self.NORMAL_MODES = []
            if format == "Gaussian":
                for i in range(0,len(outlines)):
                    if outlines[i].find("Frequencies") > -1:
                        self.FREQS.append(float(outlines[i].split()[2]))
                        if len(outlines[i].split()) > 3: self.FREQS.append(float(outlines[i].split()[3]))
                        if len(outlines[i].split()) > 4: self.FREQS.append(float(outlines[i].split()[4]))
                    if outlines[i].find("Atom  AN      X      Y      Z") > -1:
                        for j in range(i+1, i+1+self.NATOMS): pass #print(outlines[j].split()[3:6])
                if len(self.FREQS) > 0:
                    for i in range(0,len(outlines)):
                        if outlines[i].find("Zero-point correction") > -1: self.ZPE = float(outlines[i].split()[2])
                        if outlines[i].find("thermal Enthalpies") > -1: self.ENTHALPY = float(outlines[i].split()[6])
                        if outlines[i].find("thermal Free Energies") > -1: self.GIBBS = float(outlines[i].split()[7])

        def getMULLIKEN(self, outlines, natoms, format):
            if format == "Gaussian":
                for i in range(0,len(outlines)):
                    if outlines[i].find("Mulliken charges:") > -1 or outlines[i].find("Mulliken charges and spin densities:") > -1:

                        self.MULLIKEN = []
                        for j in range(i+2,i+natoms+2):
                            self.MULLIKEN.append(float(outlines[j].split()[2]))

        def getAPT(self, outlines, natoms, format):
            if format == "Gaussian":
                for i in range(0,len(outlines)):
                    if outlines[i].find("APT charges:") > -1:
                        self.APT = []
                        for j in range(i+2,i+natoms+2):
                            self.APT.append(float(outlines[j].split()[2]))

        def getCPU(self, outlines, format):
            days = 0
            hours = 0
            mins = 0
            secs = 0
            if format == "Gaussian":
                    for i in range(0,len(outlines)):
                        if outlines[i].find("Job cpu time") > -1:
                            days = days + int(outlines[i].split()[3])
                            hours = hours + int(outlines[i].split()[5])
                            mins = mins + int(outlines[i].split()[7])
                            secs = secs + int(float(outlines[i].split()[9]))
            self.CPU=[days,hours,mins,secs]

        def getSPIN(self, outlines, format):
                    if format == "Gaussian":
                        for i in range(0,len(outlines)):
                                if outlines[i].find("<Sx>") > -1:
                                    self.S2 = float(outlines[i].split()[7].replace('\U00002013', '-'))

        def getENERGY(self, outlines, format):
            if format == "Gaussian":
                uff = 0
                am1 = 0
                pm3 = 0
                scf = 0
                oniom = 0
                for i in range(0,len(outlines)):
                    if outlines[i].find(" UFF") > -1: uff = i
                    if outlines[i] .find("AM1") > -1: am1 = i
                    if outlines[i].find("PM3") > -1: pm3 = i
                    if outlines[i].find("ONIOM") > -1: oniom = i
                    if outlines[i].find("SCF Done") > -1: scf = i
                    if outlines[i].find("(RB3LYP)") > -1 or outlines[i].find("(UB3LYP)") > -1: self.FUNCTIONAL = "B3LYP"
                    if outlines[i].find("(RB-P86)") > -1: self.FUNCTIONAL = "BP86"
                    if outlines[i].find("(RB2PLYP)") > -1: self.FUNCTIONAL = "B2PLYP"
                    if outlines[i].find("(RM06)") > -1: self.FUNCTIONAL = "M06"
                    if outlines[i].find("(RM062X)") > -1: self.FUNCTIONAL = "M06-2X"
                    if outlines[i].find("(RM06L)") > -1: self.FUNCTIONAL = "M06L"
                    if outlines[i].find("(RB97D)") > -1: self.FUNCTIONAL = "B97D"

                calctype = [uff,am1,pm3,oniom,scf]
                for i in range(0,len(outlines)):
                    if scf == max(calctype) and outlines[i].find("SCF Done") > -1 and outlines[i].find("Initial convergence to 1.0D-05 achieved")==-1: # Get energy from HF or DFT calculation
                        self.ENERGY = (float(outlines[i].split()[4]))
                    if oniom == max(calctype) and outlines[i].find("ONIOM: extrapolated energy") > -1: # Get energy from ONIOM calculation
                        self.ENERGY = (float(outlines[i].split()[4]))
                    if pm3 == max(calctype) or am1 == max(calctype) or uff == max(calctype):
                        if outlines[i].find("Energy= ") > -1 and outlines[i].find("Predicted")==-1 and outlines[i].find("Thermal")==-1: # Get energy from Semi-empirical or Molecular Mechanics calculation
                            self.ENERGY = (float(outlines[i].split()[1]))
                    #if outlines[i].find("Total free energy in solution") > -1:
                    #   self.SOLVENERGY = (float(outlines[i+1].split()[7]))


        if os.path.exists(file): outfile = open(file,"r")

        outlines = outfile.readlines()
        getFORMAT(self, outlines)
        getJOBTYPE(self, outlines, self.FORMAT)
        getTERMINATION(self, outlines,self.FORMAT)
        getCHARGE(self, outlines, self.FORMAT)
        getENERGY(self, outlines, self.FORMAT)
        #getSPIN(self, outlines, self.FORMAT)
        getATOMTYPES(self, outlines, self.FORMAT)
        getFREQS(self, outlines, self.FORMAT)
        getCPU(self, outlines, self.FORMAT)
        getMULLIKEN(self, outlines, self.NATOMS, self.FORMAT)
        getAPT(self, outlines, self.NATOMS, self.FORMAT)
        #print "\nSuccessfully read geometry output", file

#Read molecule data from an input file
class getinData:
    def __init__(self, file):
        if not os.path.exists(file):
            print(("\nFATAL ERROR: Input file [ %s ] does not exist"%file))

        def getJOBTYPE(self, inlines):
            for i in range(0,len(inlines)):
                if inlines[i].find("#") > -1:
                    self.JOBTYPE = inlines[i].split()

        def getCHARGE(self, inlines):
            for i in range(0,len(inlines)):
                if inlines[i].find("#") > -1:
                    #print "here",inlines[i], inlines[i+1]
                    if len(inlines[i+1].split()) == 0:
                        self.CHARGE = inlines[i+4].split()[0]
                        self.MULT = inlines[i+4].split()[1]
                    if len(inlines[i+2].split()) == 0:
                        self.CHARGE = inlines[i+5].split()[0]
                        self.MULT = inlines[i+5].split()[1]

        def getMEMREQ(self, inlines):
            for i in range(0,len(inlines)):
                if inlines[i].find("%mem") > -1:
                    self.MEMREQ = inlines[i].split()


        def getNPROC(self, inlines):
            for i in range(0,len(inlines)):
                if inlines[i].find("%nproc") > -1:
                    self.MEMREQ = inlines[i].split()


        def getATOMTYPES(self, inlines):
            self.ATOMTYPES = []
            self.LEVELTYPES = []
            self.NLEVELS = 1
            for i in range(0,len(inlines)):
                if inlines[i].find("#") > -1:
                    if len(inlines[i+1].split()) == 0: start = i+5
                    if len(inlines[i+2].split()) == 0: start = i+6
                    break
            for i in range(start,len(inlines)):
                if len(inlines[i].split()) ==0:
                    break
                else:
                    self.ATOMTYPES.append(inlines[i].split()[0])

                    #for oniomlevel in ["H", "M", "L"]:
                    #    if inlines[i].split()[4] == oniomlevel: self.LEVELTYPES.append(oniomlevel)
                    #    if inlines[i].split()[5] == oniomlevel: self.LEVELTYPES.append(oniomlevel)

            if len(self.LEVELTYPES) > 1: self.NLEVELS = 2
            for level in self.LEVELTYPES:
                if level == "M": self.NLEVELS = 3; break

        def getCONNECTIVITY(self, inlines, natoms):
            self.CONNECTIVITY = []
            self.OPTIONAL = []
            for i in range(0,len(inlines)):
                if inlines[i].find("#") > -1:
                    start = i+natoms+6
                    break

            if start < len(inlines):
                j = 1
                for i in range(start,len(inlines)):
                    num = 0
                    if len(inlines[i].split()) != 0:
                        try:
                            num = int(inlines[i].split()[0])
                        except ValueError:
                            num = 0
                    if num == j:
                        bond=[]
                        neighbors=(len(inlines[i].split())-1)/2
                        if neighbors!=0:
                            for k in range(0,neighbors):
                                bond.append((inlines[i].split()[1+2*k])+"__"+(inlines[i].split()[2+2*k]))
                        self.CONNECTIVITY.append(bond)
                        j = j+1

                if len(self.CONNECTIVITY) == natoms:
                    for i in range(0, natoms):
                        for partner in self.CONNECTIVITY[i]:
                            info = partner.split("__")
                            nextatom = int(info[0])-1
                            bondorder = float(info[1])
                            nope=0
                            for otherpartner in self.CONNECTIVITY[nextatom]:
                                otherinfo = otherpartner.split("__")
                                othernextatom = int(otherinfo[0])-1
                                if othernextatom==i:
                                    nope=nope+1
                            if nope==0:
                                self.CONNECTIVITY[nextatom].append(str(i+1)+"__"+info[1])


                for i in range(start+j,len(inlines)):
                    if len(inlines[i].split()) != 0:
                        self.OPTIONAL.append(inlines[i])


        def getCARTESIANS(self, inlines, natoms):
            self.CARTESIANS = []
            for i in range(0,len(inlines)):
                if inlines[i].find("#") > -1:
                    start = i+5
                    break

            for i in range(start,len(inlines)):
                if len(inlines[i].split()) == 0:
                    break
                elif len(inlines[i].split()) == 4:
                    self.CARTESIANS.append([float(inlines[i].split()[1]), float(inlines[i].split()[2]), float(inlines[i].split()[3])])

        def getBONDINDEX(self,inlines,natoms):
            conn=[]
            connectivity = 0

            for j in range(0,len(inlines)):
                if "1 " in inlines[j]:
                    startconn = j
                    connectivity  = 1
                    break

            if connectivity == 1:
                for j in range(startconn,len(inlines)):
                        conn.append(inlines[j])

            self.BONDINDEX=[]

            for j in range(0,natoms):
                self.BONDINDEX.append([0])
                for k in range(0,natoms):
                    self.BONDINDEX[j].append(0)

            for j in range(0,natoms):
                if connectivity == 1:
                    for bonded in conn[j].split():
                        if is_number(bonded) ==True:
                            if int(bonded)-1!=j:
                                self.BONDINDEX[j][int(bonded)-1]=1
                                self.BONDINDEX[int(bonded)-1][j]=1


        def getCONSTRAINED(self, optional):
            self.CONSTRAINED = []
            for line in optional:
                if line.find("B") > -1 and line.find("F") > -1:
                    self.CONSTRAINED.append([int(line.split(" ")[1])-1,int(line.split(" ")[2])-1])

        infile = open(file,"r")
        inlines = infile.readlines()
        #print "here"
        getJOBTYPE(self, inlines)
        getCHARGE(self, inlines)
        getMEMREQ(self, inlines)
        getNPROC(self, inlines)
        getATOMTYPES(self, inlines)
        self.NATOMS=len(self.ATOMTYPES)
        getCONNECTIVITY(self, inlines, self.NATOMS)
        getBONDINDEX(self,inlines,self.NATOMS)
        getCARTESIANS(self, inlines, self.NATOMS)
        getCONSTRAINED(self, self.OPTIONAL)


class getxyzData:
    def __init__(self, file):
        if not os.path.exists(file):
            print(("\nFATAL ERROR: Input file [ %s ] does not exist"%file))

        def getNATOMS(self, inlines):
            try: self.NATOMS = int(inlines[0].strip())
            except: self.NATOMS = 0

        def getATOMTYPES(self, inlines):
            atomline = 0
            self.ATOMTYPES = []
            self.CARTESIANS = []
            self.ENERGY = []

            for i in range(0,len(inlines)):
                if len(inlines[i].split()) == 4:
                    try:
                        float(inlines[i].split()[1])
                        float(inlines[i].split()[2])
                        float(inlines[i].split()[3])
                        atomline += 1
                    except: pass
            self.NMOLS = int(atomline / self.NATOMS)
            print('    {} contains {} molecules'.format(file, self.NMOLS))
            for mol in range(0,self.NMOLS):
                try: energy = float(inlines[1+2*mol+mol*self.NATOMS].strip().split()[0])
                except: 
                     try: energy = float(inlines[1+2*mol+mol*self.NATOMS].strip().split()[1])
                     except: energy = 0.0

                if mol == 0: e_zero = energy
                e_rel = (energy - e_zero) * 2625.5 / 4.184
                #print(mol, energy, e_rel)
                atoms, cartesians = [], []
                for i in range(2+2*mol+mol*self.NATOMS,2+2*mol+mol*self.NATOMS+self.NATOMS):
                    coords = inlines[i].strip()
                    if len(coords.split()) == 4:
                        [atom, xco, yco, zco] = [coords.split()[0], float(coords.split()[1]), float(coords.split()[2]), float(coords.split()[3])]
                        atoms.append(atom)
                        cartesians.append([xco, yco, zco])
                self.ATOMTYPES.append(atoms)
                self.CARTESIANS.append(cartesians)
                self.ENERGY.append(e_rel)

        infile = open(file,"r")
        inlines = infile.readlines()
        #print "here"
        try:
            getNATOMS(self, inlines)
            getATOMTYPES(self, inlines)
        except: pass

class writemultGinput:
############################################################################
#              Multiple Gaussian Inputs based on energy cutoff             #
############################################################################
    def __init__(self, file, MolSpec, args):
        if MolSpec.NMOLS > 1:
            print('    Applying an energy cutoff (--ewin) of {} kcal/mol'.format(args.ewin))

        for mol in range(0,MolSpec.NMOLS):
            energy = MolSpec.ENERGY[mol]
            if energy <= args.ewin:
                print('o   Conformer {}: Erel = {:>4.2f} is processed'.format((mol+1),energy))
                atomtypes = MolSpec.ATOMTYPES[mol]
                cartesians = MolSpec.CARTESIANS[mol]
                confname = str(mol+1)
                if args.overwrite == False: newfile = os.path.splitext(file)[0]+'_'+args.append+'_'+confname
                elif args.overwrite == True: newfile = os.path.splitext(file)[0]+'_'+confname
                outfile = newfile+'.com'
                chkfile = newfile+'.chk'
                while len(chkfile.split('/')) > 1: chkfile = chkfile.split('/')[1]
                print("   ", file, ">>", outfile)
                fileout = open(outfile, "w")
                fileout.write("%chk="+chkfile+"\n")
                if hasattr(args, "mem"): fileout.write("%mem="+args.mem+"\n")
                if hasattr(args, "nproc"): fileout.write("%nprocshared="+str(args.nproc)+"\n")
                fileout.write("# "+args.route+"\n\n")
                fileout.write(newfile+"   "+str(energy)+"\n\n")
                if not hasattr(args, "charge") and not hasattr(args, "mult"):
                    fileout.write(str(MolSpec.CHARGE)+" "+str(MolSpec.MULT)+"\n")
                else:
                    fileout.write(str(args.charge)+" "+str(args.mult)+"\n")

                try:
                  for i in range(0,MolSpec.NATOMS):
                    atom = atomtypes[i]
                    if len(atom) > 1: atom = atom[0].upper() + atom[1:].lower()
                    fileout.write("{:>2}".format(atom))
                    for j in range(0,3):
                        fileout.write("  {:>12.8f}".format(cartesians[i][j]))
                    fileout.write("\n")
                except: pass
                fileout.write("\n")
                if args.opt != None:
                    fileout.write(args.opt+"\n")
                    fileout.write("\n")

            else:
                print('x   Conformer {}: Erel = {:>4.2f} is ignored'.format((mol+1),energy))

class writeGinput:
############################################################################
#                              Gaussian Format                             #
############################################################################
    def __init__(self, file, MolSpec, args):
        if args.overwrite == False: newfile = os.path.splitext(file)[0]+'_'+args.append
        elif args.overwrite == True: newfile = os.path.splitext(file)[0]
        newfile = newfile.replace(',','')
        outfile = newfile+'.com'
        chkfile = newfile+'.chk'
        while len(chkfile.split('/')) > 1: chkfile = chkfile.split('/')[1]
        print("   ", file, ">>", outfile)
        fileout = open(outfile, "w")
        fileout.write("%chk="+chkfile+"\n")
        if hasattr(args, "mem"): fileout.write("%mem="+args.mem+"\n")
        if hasattr(args, "nproc"): fileout.write("%nprocshared="+str(args.nproc)+"\n")
        fileout.write("# "+args.route+"\n\n")
        fileout.write(newfile+"\n\n")
        if args.charge == None or args.mult == None:
            fileout.write(str(MolSpec.CHARGE)+" "+str(MolSpec.MULT)+"\n")
        else:
            fileout.write(str(args.charge)+" "+str(args.mult)+"\n")

        for i in range(0,MolSpec.NATOMS):
            fileout.write(MolSpec.ATOMTYPES[i])
            for j in range(0,3):
                fileout.write("  "+str(Decimal(str((MolSpec.CARTESIANS[i][j])))))
            fileout.write("\n")
        fileout.write("\n")
	if args.link1 != None:
            fileout.write("--Link1--\n%chk="+chkfile+"\n")
            if hasattr(args, "mem"): fileout.write("%mem="+args.mem+"\n")
            if hasattr(args, "nproc"): fileout.write("%nprocshared="+str(args.nproc)+"\n")
            fileout.write("# "+args.link1+"\n\n")
            fileout.write(newfile+"\n\n")
            if args.charge == None or args.mult == None:
                fileout.write(str(MolSpec.CHARGE)+" "+str(MolSpec.MULT)+"\n")
            else:
                fileout.write(str(args.charge)+" "+str(args.mult)+"\n")
            fileout.write("\n")
        if args.opt != None:
            for option in args.opt: fileout.write(option+"\n")
            fileout.write("\n")

class writeOinput:
############################################################################
#                                 Orca Format                              #
############################################################################
        def __init__(self, file, MolSpec, args):
                try:
                   if args.template == 'wB97X-V': args.route = wb97xv_route
                   if args.template == 'DLPNO': args.route = dlpno_route
                   if args.template == 'DLPNO2': args.route = dlpno_loose_route
                except: pass
                newfile = os.path.splitext(file)[0]+'_'+args.append
                outfile = newfile+'.inp'
                print("   ", file, ">>", outfile)
                fileout = open(outfile, "w")
                mem = int(args.mem.replace('GB','000'))
                if mem >= 4000: mem = 4000
                fileout.write("# "+newfile+"\n")
                fileout.write("# Memory per core\n")
                if hasattr(args, "mem"): fileout.write("%maxcore "+str(mem)+"\n")
                fileout.write("# Number of processors\n")
                if hasattr(args, "nproc"): fileout.write("%pal nprocs "+str(args.nproc)+" end\n")
                fileout.write("! "+args.route+"\n")
                if args.charge == None or args.mult == None:
                    fileout.write("* xyz "+str(MolSpec.CHARGE)+" "+str(MolSpec.MULT)+"\n")
                else:
                    fileout.write("* xyz "+str(args.charge)+" "+str(args.mult)+"\n")
                for i in range(0,MolSpec.NATOMS):
                        fileout.write(MolSpec.ATOMTYPES[i])
                        for j in range(0,3):
                                fileout.write("  "+str(Decimal(str((MolSpec.CARTESIANS[i][j])))))
                        fileout.write("\n")
                fileout.write("*\n")

if __name__ == "__main__":
    parser = OptionParser(usage="Usage: %prog [options] <input1>.log <input2>.log ...")
    parser.add_option('--append', action="store", default="new", help='Append text to create new filenames')
    parser.add_option('--ewin', action="store", default=3.0, type='float', help='Energy cutoff for processing multiple conformer XYZ files')
    parser.add_option('--link1', action="store", default=None, help='Link1 text')
    parser.add_option('--route', action="store", default="", help='Route command line')
    parser.add_option('--program', action="store", default='G16', help='Program to run calculations: [G16, Orca]')
    parser.add_option('--nproc', action="store", default=24, help='Number of processors for calculations')
    parser.add_option('--mem', action="store", default='96GB',help='Memory for calculations')
    parser.add_option('--mult', action="store", help='Specify multiplicity')
    parser.add_option('--charge', action="store", help='Specify charge')
    parser.add_option('--overwrite', action="store_true", default=False, help='Overwrites existing input files')
    parser.add_option('--opt', action="store", default=None, help='Optional section e.g. basis set specification')
    parser.add_option('--template', action="store", default=None, help='Request template calculation: You can select: wB97X-V, DLPNO, DLPNO2')

    (options, args) = parser.parse_args()

    if options.template == 'DLPNO' or options.template == 'DLPNO2' or options.template == 'wB97X-V':
       options.program = 'Orca'

    # Get the filenames from the command line prompt
    files = []; in_files = []; xyz_files = []
    if len(sys.argv) > 1:
        for elem in sys.argv[1:]:
            try:
                if os.path.splitext(elem)[1] in [".out", ".log"]:
                    for file in glob(elem): files.append(file)
                if os.path.splitext(elem)[1] in [".com", ".inp"]:
                    for file in glob(elem): in_files.append(file)
                if os.path.splitext(elem)[1] in [".xyz"]:
                    for file in glob(elem): xyz_files.append(file)
            except IndexError: pass

    # Takes arguments: (1) file(s) (2) new job parameters
    else:
        print("\nWrong number of arguments used. Correct format: AutoPrep file [new job parameters]\n")
        sys.exit()

    for file in files:
        MolSpec = getoutData(file)
        if options.program.upper() == 'G16': writeGinput(file, MolSpec, options)
        elif options.program.upper() == 'ORCA': writeOinput(file, MolSpec, options)
        else: print('WARNING:', options.program, 'is not recognized ...' )

    for file in in_files:
        MolSpec = getinData(file)
        if options.program.upper() == 'G16': writeGinput(file, MolSpec, options)
        elif options.program.upper() == 'ORCA': writeOinput(file, MolSpec, options)
        else: print('WARNING:', options.program, 'is not recognized ...' )

    for file in xyz_files:
        MolSpec = getxyzData(file)
        if options.program.upper() == 'G16': writemultGinput(file, MolSpec, options)
        #elif options.program.upper() == 'ORCA': writeOinput(file, MolSpec, options)
        else: print('WARNING:', options.program, 'is not recognized ...' )


